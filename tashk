#!/bin/sh
# (c) Rudy Dellomas III, GPLv3. See LICENSE file at root of repository.

[ -z "$TASHK_DIR" ] && printf "%s\n" 'Please set TASHK_DIR.' >&2 && exit 1
[ "$(id -u)" = "root" ] && printf "%s\n" 'Running this as root is a bad idea!' >&2 && exit 1

_git() {
	# drop-in git replacement
	# TODO: check if the directory contains a git repository...
	if [ "$TASHK_SILENCE_GIT" = "false" ]; then
		git -C "$TASHK_DIR" "$@"
	else
		# S I L E N C E, G I T - Orks, probably
		git -C "$TASHK_DIR" "$@" >/dev/null 2>&1
	fi
}

_GIT() {
	# unsilenced git
	git -C "$TASHK_DIR" "$@" 2>/dev/null
}

toggle_silent() {
	if [ "$TASHK_SILENCE_GIT" = "false" ]; then
		TASHK_SILENCE_GIT="true"
	else
		TASHK_SILENCE_GIT="false"
	fi
}

tashk_add() {
	[ -n "$ISODATE" ] && datemsg=" (Date will be entered automatically.)"
	printf "%s\n" "Enter the new task.$datemsg" >&2

	read -r task
	if [ -z "$task" ]; then
		printf "%s\n" "No task entered, aborting..." >&2
		return 2
	fi
	# TODO: add ability to toggle priority + date handling with flags
	priority=$(printf "%s\n" "$task" | grep '^([A-Z])')
	if [ -n "$priority" ]; then
		priority="${priority%% *} "
		printf "%s\n" "Detected priority: $priority" >&2
		task="${task##"$priority"}"
	fi
	# TODO: check if the user gave a date?
	if [ -n "$ISODATE" ]; then
		task="$priority$ISODATE $task"
	else
		task="$priority$task"
	fi

	printf "%s\n" "$task" >> "$FILE"
	task_no=$(wc -l "$FILE")
	task_no=${task_no%%" $FILE"}
	printf "%s\n" "Added \"$task\" as task no. $task_no" >&2
	_git commit -m "\"$task\" (no. $task_no) added to $TASHK_FILE" "$FILE"
}

tashk_clean() {
	shift 1
	tashk_getopts "$@"
	shift $(( OPTIND - 1 ))

	if [ "$1" = "all" ]; then
		branch=$(_GIT branch --show-current)
		files=$(_GIT ls-tree "$branch" --name-only)
		[ -n "$files" ] || files="$TASHK_DIR/*.txt"
		for file in $files; do
			file="${file##$TASHK_DIR}"
			printf "%s: " "$file"
			tashk_clean clean -f "$file"
		done
		exit $?
	fi
	to_delete=$(grep -c '^x ' "$FILE")
	to_compress=$(grep -c '^$' "$FILE")
	[ "$to_delete" -eq 0 ] && [ "$to_compress" -eq 0 ] && printf "%s\n" "Nothing to clean up." >&2 && return 2
	# TODO: this would be a nice little safety
#	if [ -z $force ]; then
#		printf "%s\n" "Really delete $to_delete completed task(s)? (y/N)"
#	fi
	# XXX: -i~ is a common extension, but is non-POSIX.
	# Using it here would save a `cp`.
	cp "$FILE" "$FILE~"
	sed '/^x /d;/^$/d' "$FILE~" > "$FILE"
	printf "%s\n" "$to_delete task(s) and $to_compress empty lines deleted from $TASHK_FILE."
	_git commit -m "Removed $to_delete completed tasks, $to_compress empty lines from $TASHK_FILE" "$FILE"
}

tashk_do() {
	# Mark task as completed.
	task_no=$2
	task=$(sed "$task_no!d" "$FILE")
	[ "${task%% *}" = "x" ] && printf "%s\n" "Can't do a done task!" && return 1

	# TODO: add a way of disabling adding the date?
	taskdone=$(printf "%s\n" "$task" | sed "\
		s/^(\([A-Z]\)) \(.*\)/\2 pri:\1/;\
		s/^\(.*\)/x $ISODATE \1/;")

	cp "$FILE" "$FILE~"
	sed "$task_no c\
		$taskdone" "$FILE~" > "$FILE"

	fail=$?
	if [ "$fail" -ne 0 ]; then
		cp "$FILE~" "$FILE"
		printf "%s\n" "ERROR: sed failed with error code $fail" >&2
		return $fail
	fi
	_git commit -m "Marked task $task_no as complete - $taskdone" "$FILE"
}

tashk_ls() {
	# opts: -p: prefilter through command
	shift 1
	parg=''; pflag='0' # set defaults
	COMMAND_FLAGS='p:'
	tashk_getopts "$@"
	shift $(( OPTIND - 1 ))

	[ -n "$parg" ] && TASHK_LS_PREFILTER="$parg" # "$TASHK_LS_PREFILTER" can be set to a default

	if [ -z "$TASHK_LS_PREFILTER" ]; then
		nl -ba -w2 -s' ' "$FILE"
	else
		$TASHK_LS_PREFILTER < "$FILE" | nl -ba -w2 -s' '
	fi

}

tashk_move() {
	# No options for now
	shift 1
	tashk_getopts "$@"
	shift $(( OPTIND - 1 ))

	# Every positive integer is a line number and therefore a task
	# Everything else is a potential filename
	to_move=""
	for arg do
		case "$arg" in
			''|*[!0-9]*)
				# Move all tasks listed up until now
				# split arguments for use as a list
				# shellcheck disable=2086
				tashk_move_now "$arg" $to_move
				to_move=""
				;;
			*) [ -n "$to_move" ] && to_move="$to_move $arg" || \
				to_move="$arg" ;;
		esac
	done
}

# helper function for tashk_move
tashk_move_now() {
	destfile="$1" # short file name
	destination="$TASHK_DIR/$1"
	if ! [ -f "$destination" ]; then
		printf "%s\n" "ERROR: todofile $destfile doesn't exist" >&2
		return 1
	fi
	# Everything left is a task number
	shift 1
	if [ "$#" -eq 0 ]; then
		printf "%s\n" "ERROR: No tasks to move to $destfile" >&2
		return 1
	fi

	# TODO: investigate: do all of this with one sed call?
	for tasknum do
		# XXX: could save cp's here with some creative sed -i~ 'ing.
		cp "$FILE" "$FILE~"
		task=$(sed "${tasknum}q;d" "$FILE~")
		[ -n "$task" ] && printf "%s\n" "$task" >> "$destination"
		# replace with empty lines to preserve task numbering
		sed "${tasknum}s/.*//g" "$FILE~" > "$FILE"
	done
	_git commit -m \
		"tashk move: $# task(s) from $TASHK_FILE moved to $destfile" \
		"$FILE" "$destination"
}

tashk_edit() {
	shift 1
	tashk_getopts "$@"
	shift $(( OPTIND - 1 ))
	# open in editor. vi if unspecified.
	EDITOR="${EDITOR:-vi}"
	$EDITOR "$FILE"
	_git commit -m "tashk edit on $TASHK_FILE" "$FILE"
}

tashk_sort() {
	shift 1
	tashk_getopts "$@"
	shift $(( OPTIND - 1 ))

	# TODO: document this in tashk help
	if [ "$1" = "all" ]; then
		branch=$(_GIT branch --show-current)
		files=$(_GIT ls-tree "$branch" --name-only)
		[ -n "$files" ] || files="$TASHK_DIR/*.txt"
		for file in $files; do
			file="${file##$TASHK_DIR}"
			printf "Sorting %s...\n" "$file" >&2
			tashk_sort sort -f "$file"
		done
		exit $?
	fi
	# The todo.txt file standard's rationale for sorting
	# is most correct when characters are sorted in ASCII/UTF8 order.
	# This causes the sort order of
	# Priorities -> dated tasks -> (most) undated tasks -> completed tasks.
	# Tasks that start with y, z and emojis are right out.
	# TODO: add some kind of override?
	LC_ALL=POSIX sort "$FILE" -o "$FILE"
	_git commit -m "Sorted $TASHK_FILE" "$FILE"
}

tashk_usage() {
	case "$1" in
		add|a)
			printf "%s\n" \
"Usage: $PROGRAM add
	Reads a task from stdin,
	prepends the current date in the correct space,
	and adds the task to $TASHK_FILE.
	Handles priorities gracefully, but not dates.
	Do not enter a date in yourself! Fixing this is a planned feature..." >&2;;
		edit|e)
			printf "%s\n" \
"Usage: $PROGRAM edit
	Edits todo.txt in your favourite terminal editor.

ENVIRONMENT VARIABLES:
	Uses \$EDITOR, or vi if unset." >&2 ;;
		clean|c)
			printf "%s\n" \
"Usage: $PROGRAM clean
       $PROGRAM clean all
	Deletes completed tasks and empty lines from the todofile
	Stores a 'backup' in $TASHK_FILE~.

	The optional argument 'all' makes clean do this to all todofiles.
	If TASHK_DIR is a git repository, it will clean all the files returned
	by 'tashk git ls-tree \$(tashk git branch --show-current) --name-only'.
	If it isn't, it will clean all of the files matched by the glob,
	'$TASHK_DIR/*.txt'." >&2;;
		do|d|x)
			printf "%s\n" \
"Usage: $PROGRAM do
	Marks a task as complete.
	Strips the priority (and stores it in a key:val tag)
	and prepends 'x <today's date> '.
	Does nothing to tasks that are already completed,
	which in this context means any line that starts with 'x ',
	as per spec.
	Stores a 'backup' in $TASHK_FILE~." >&2;;
		ls|list|show)
			printf "%s\n" \
"Usage: $PROGRAM ls [-p prefilter]
	Lists tasks using command 'nl'. See nl(1p).

FLAGS:
	'-p prefilter' - Passes $TASHK_FILE through the stdin of the command
			 'prefilter' before passing the output to nl(1p).
			 The latest invocation will be the one used.

ENVIRONMENT VARIABLES:
	\$TASHK_LS_PREFILTER can be used to set a default prefilter even
	when the -p flag is not set." >&2;;
		move|mv)
			printf "%s\n" \
"Usage: $PROGRAM mv tasks... destination [[tasks... destination]...]
	Moves a list of tasks to the destination file.

ARGUMENTS:
	tasks...     - One or more integers,
	               referring to line numbers (tasks) in $TASHK_FILE.
	destination  - An existing todofile in TASHK_DIR.
	               Tasks will be removed from $TASHK_FILE and appended.

	The [tasks... destination] pattern can be repeated to move
	more tasks to different destinations. tashk mv will create a new
	git commit for each set of task movements.

NOTES:
	- Leaves blank lines where tasks used to be, to avoid making
	  old line numbers obsolete. To remove them, do 'tashk clean'.
	- Similarly, appending to the destination files is naive-
	  tasks are added to the end with no regard for existing empty lines.
	- BUG: Currently, tashk mv never exits with an error.
	  This is inconsistent with other subcommands,
	  which will exit with an error if no changes could be detected by git.
" >&2;;
		git)
			printf "%s\n" \
"Usage: $PROGRAM git [...]
	Runs git and passes all arguments to it verbatim.
	See the manpage git(1)." >&2;;
		sort)
			printf "%s\n" \
"Usage: $PROGRAM sort
	Performs a sort on the contents of $TASHK_FILE.
	Locale will be set to POSIX for portability,
	as this ensures that the sort will be according to character codes
	rather than alphanumeric sorts that can vary even within
	English locales." >&2;;
		*)
			printf "%s\n" \
"tashk: the unix todo.txt manager
Usage: $PROGRAM [-v] [-f todofile] [command] [command_flags] command_args...
  '-v' toggles git output (supressed by default)
  '-f todofile' indicates which todo file to use, default todo.txt
Command flags are command-specific, but always stop at the first non-flag argument.

Valid commands are:
	add, clean, edit, move, do, ls, sort, git, help
For help with specific commands, do 'tashk help <command>'" >&2;;
	esac
}

#shellcheck disable=2034
tashk_getopts() {
	# Set variables based on flags given
	# "$COMMAND_FLAGS" should be set to a valid getopts string
	# v and f: are always valid and reset whatever the default was

	# Arguments that aren't v: or :f are handled as follows.
	# Their presence is stored in a variable known as $xflag,
	# where x is the character of that flag. Repeated invocations will
	# toggle $xflag between 1 and 0, with 1 meaning an odd total of invocations.
	# This allows for the "toggling" of a default flag by simply invoking it again.

	# If the flag takes a particular argument, it will be stored in $xarg.
	# $xarg will *always be empty* if not configured to take an argument.
	while getopts "vf:$COMMAND_FLAGS" flag; do
		case "$flag" in
			#a) aflag=1; aarg="$OPTARG" ;;
			v) toggle_silent;;
			f) TASHK_FILE=$OPTARG;;
			p) [ "$pflag" != '0' ]; pflag=$?; parg=$OPTARG;;
			?) tashk_usage "$COMMAND"; exit 2;;
		esac
		OPTARG=""
	done
	FILE="$TASHK_DIR/$TASHK_FILE"
}


PROGRAM=${0##*/}

# Quit if we don't have any arguments
[ "$#" -lt 1 ] && tashk_usage && exit 2

# Get options that will apply by default
tashk_getopts "$@"
shift $(( OPTIND - 1 ))
COMMAND=$1

# Set Defaults
ISODATE=$(date '+%Y-%m-%d') # ISO standard date format, used by the format
TASHK_SILENCE_GIT=${TASHK_SILENCE_GIT:-true}
TASHK_FILE="${TASHK_FILE:-todo.txt}" # The name of the file - todo.txt by default
FILE="$TASHK_DIR/$TASHK_FILE" # The absolute path of the file

# TODO: Add a _git pull here
case "$COMMAND" in
	add|a) tashk_add "$@";;
	clean|c) tashk_clean "$@";;
	edit|e) tashk_edit "$@";;
	do|x|d) tashk_do "$@";;
	move|mv) tashk_move "$@" ;;
	#rm|remove) ;;
	ls|list|show) tashk_ls "$@";;
	#init);;
	sort|s) tashk_sort "$@";;
	git) TASHK_SILENCE_GIT=false && shift 1 && _git "$@";;
	help) tashk_usage "$2";;
	*) tashk_usage help;;
esac
